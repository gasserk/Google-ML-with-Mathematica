(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    236706,       4785]
NotebookOptionsPosition[    234122,       4731]
NotebookOutlinePosition[    234476,       4747]
CellTagsIndexPosition[    234433,       4744]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"c1", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"140", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"130", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"150", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"170", ",", "0"}], "}"}], "->", "1"}]}], "}"}], ",", 
    RowBox[{"Method", "\[Rule]", "\"\<DecisionTree\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.745215712740574*^9, 3.745215724585971*^9}, {
  3.7452159814022493`*^9, 3.745216012856701*^9}, {3.7452160724952087`*^9, 
  3.7452161643600597`*^9}, {3.7452162601240177`*^9, 3.745216271344347*^9}, {
  3.745216898961755*^9, 3.7452169154365664`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"57d64f1f-04e8-4c73-90b0-bacec8348168"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "0", "1"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "0", "1"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 4, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 5999172908886121309]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 4, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {147.5, 0.5}, "Method" -> "Naive", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {147.5, 0.5}, 
                   "StandardDeviation" -> {14.79019945774904, 0.5}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{-0.7071067811865475, -0.7071067811865475}, {
                   0.7071067811865475, -0.7071067811865475}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {147.5, 0.5}, 
                    "StandardDeviation" -> {14.79019945774904, 0.5}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 2, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.008702, "MaxTrainingMemory" -> 61120, 
                  "DataMemory" -> 176, "FunctionMemory" -> 21752, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{2018, 9, 6, 6, 17, 40.638515`8.361512807961503},
                     "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             3183744061192450103]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {147.5, 0.5}, 
             "StandardDeviation" -> {14.79019945774904, 0.5}, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 6290908127098961799]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6693038715456136576]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[0 -> 1, 1 -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 6697000108911617603, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4810585743643111211]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[0 -> 0.5, 1 -> 0.5]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["Tree" -> MachineLearning`DecisionTree[
        Association[
        "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
         RawArray["Real32",{-0.5070925354957581}], "NominalSplits" -> {}, 
         "Children" -> RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
         RawArray["UnsignedInteger8",{{3, 1}, {1, 3}}], "RootIndex" -> 1, 
         "NominalDimension" -> 0]], "Processor" -> 
      MachineLearning`MLProcessor["Values", 
        Association[
        "Info" -> Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
      "DecisionTree", "Options" -> 
      Association[
       "DistributionSmoothing" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.6056511703050771, 0.05260699991293714], "Accuracy" -> 
         PlusMinus[0.37499999999999994`, 0.081385756151478], "EvaluationTime" -> 
         0.00025327999999999993`, "TestSize" -> 24, "TrainingSize" -> 3, 
         "TrainingTime" -> 0.004217759999999999, "TrainingMemory" -> 64762.24,
          "ModelMemory" -> 5413.4400000000005`, "ExperimentCount" -> 24, 
         "ModelUtility" -> 0.7010078106056775, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.8047189562170501, 0.33461884542196685`], 
           PlusMinus[0.5493061443340549, 0.17802364751064845`], 
           PlusMinus[0.5493061443340549, 0.17802364751064845`], 
           PlusMinus[0.8047189562170501, 0.33461884542196685`], 
           PlusMinus[0.8047189562170501, 0.33461884542196685`], 
           PlusMinus[0.5493061443340549, 0.17802364751064845`], 
           PlusMinus[0.5493061443340549, 0.17802364751064845`], 
           PlusMinus[0.8047189562170501, 0.33461884542196685`], 
           PlusMinus[0.8047189562170501, 0.33461884542196685`], 
           PlusMinus[0.8047189562170501, 0.33461884542196685`], 
           PlusMinus[0.5493061443340549, 0.17802364751064845`], 
           PlusMinus[0.5493061443340549, 0.17802364751064845`], 
           PlusMinus[0.5493061443340549, 0.17802364751064845`], 
           PlusMinus[0.5493061443340549, 0.17802364751064845`], 
           PlusMinus[0.8047189562170501, 0.33461884542196685`], 
           PlusMinus[0.8047189562170501, 0.33461884542196685`], 
           PlusMinus[0.8047189562170501, 0.33461884542196685`], 
           PlusMinus[0.8047189562170501, 0.33461884542196685`], 
           PlusMinus[0.8047189562170501, 0.33461884542196685`], 
           PlusMinus[0.8047189562170501, 0.33461884542196685`], 
           PlusMinus[0.5493061443340549, 0.17802364751064845`], 
           PlusMinus[0.5493061443340549, 0.17802364751064845`], 
           PlusMinus[0.5493061443340549, 0.17802364751064845`], 
           PlusMinus[0.5493061443340549, 0.17802364751064845`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.75, 0.4330127018922194], 
           PlusMinus[0.75, 0.4330127018922194], 
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.75, 0.4330127018922194], 
           PlusMinus[0.75, 0.4330127018922194], 
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.75, 0.4330127018922194], 
           PlusMinus[0.75, 0.4330127018922194], 
           PlusMinus[0.75, 0.4330127018922194], 
           PlusMinus[0.75, 0.4330127018922194], 
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.75, 0.4330127018922194], 
           PlusMinus[0.75, 0.4330127018922194], 
           PlusMinus[0.75, 0.4330127018922194], 
           PlusMinus[0.75, 0.4330127018922194]}, 
         "Configuration" -> {
          "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
           1}, "FinalTrainingSize" -> 4], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 24], 
          TypeSystem`Vector[TypeSystem`AnyType, 24], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 190361688173573]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6056511703050771, 0.05260699991293714], "Accuracy" -> 
              PlusMinus[0.37499999999999994`, 0.081385756151478], 
              "EvaluationTime" -> 0.00025327999999999993`, "TestSize" -> 24, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.004217759999999999, 
              "TrainingMemory" -> 64762.24, "ModelMemory" -> 
              5413.4400000000005`, "ExperimentCount" -> 24, "ModelUtility" -> 
              0.7010078106056775, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00025327999999999993`, "MeanCrossEntropy" -> 
             PlusMinus[0.6056511703050771, 0.05260699991293714], 
             "ModelMemory" -> 5413.4400000000005`, "TrainingMemory" -> 
             64762.24, "TrainingTime" -> 0.004386470399999999], "Index" -> 
           1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {
              TypeSystem`Atom[Integer]}], 2]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 24], 
              TypeSystem`Vector[TypeSystem`AnyType, 24]}], 1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 190357393206277]], "MaxTrainingSize" -> 4, 
      "LastReportingTime" -> 3.745203461411979`16.326050405259068*^9, 
      "PreprocessorEvaluationTime" -> 3.818359375`2.*^-6, 
      "PreprocessorMemory" -> 39920, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 3, "TimeBudgets" -> 0.5, "ElapsedTimes" -> 
          0.59707, "ExperimentCounts" -> 24]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[190365983140869]], "ID" -> 
         190370278108165]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {130}, "ID" -> 
           7806654962102425149], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5814909113149441914]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 0.855519, "MaxTrainingMemory" -> 513216, "DataMemory" -> 
      712, "FunctionMemory" -> 113752, "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 9, 6, 6, 17, 41.436949`8.36996274881551}, "Instant", 
        "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.74521786149785*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"db9aa28d-20d3-4d09-9153-e192dfdb9fb5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c2", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"140", ",", "\"\<Smooth\>\""}], "}"}], "\[Rule]", 
      "\"\<Apple\>\""}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"130", ",", "\"\<Smooth\>\""}], "}"}], "\[Rule]", 
      "\"\<Apple\>\""}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"150", ",", "\"\<Bumpy\>\""}], "}"}], "\[Rule]", 
      "\"\<Orange\>\""}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"170", ",", "\"\<Bumpy\>\""}], "}"}], "\[Rule]", 
      "\"\<Orange\>\""}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.745217841008284*^9, 3.745217843445806*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"4fbaaa30-709c-46e3-940d-efbb62caeb4c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Nominal\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"Apple\"", "\"Orange\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Nominal\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"Apple\"", "\"Orange\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NaiveBayes\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 4, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Nominal"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
           "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Version" -> {11.3, 0}, "ID" -> 7654441683129891127]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f2" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "Version" -> {11.3, 0}, "ID" -> 5773006483248221128]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 4, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {147.5}, "Method" -> "Naive", "VectorLength" -> 
                    1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {147.5}, 
                    "StandardDeviation" -> {14.79019945774904}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                    "Model" -> 
                    Association[
                    "Matrix" -> {{1.}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {147.5}, 
                    "StandardDeviation" -> {14.79019945774904}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 1, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.008132, "MaxTrainingMemory" -> 61040, 
                    "DataMemory" -> 144, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2018, 9, 6, 6, 17, 24.971988`8.150028100177993}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                 "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                 1884974815402472505]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {11.3, 0}, "ID" -> 
                 3073686455242800294]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {147.5}, "StandardDeviation" -> {14.79019945774904}, 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6593175435314376500]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Bumpy" -> 1, "Smooth" -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 7918322121276030175, "Output" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6693038715456136576]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Apple" -> 1, "Orange" -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 6697000108911617603, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4810585743643111211]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association["Apple" -> 0.5, "Orange" -> 0.5]], "Prior" -> Automatic, 
    "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "ClassNumber" -> 2, "ClassPriors" -> Association[1 -> 0.5, 2 -> 0.5], 
      "LogProbabilities" -> {{{-0.04652001563489282, -3.0910424533583156`}, \
{-3.0910424533583156`, -0.04652001563489282}}, {{-3.0910424533583156`, \
-0.04652001563489282}, {-0.04652001563489282, -3.0910424533583156`}}}, 
      "FeatureNumber" -> 2, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
           "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Weight" -> {1., 1.}, "Type" -> "NominalVector"]], 
         "Processors" -> {
           MachineLearning`MLProcessor["DiscretizeNumericalVector", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Forbidden", 
             "Input" -> Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Boundaries" -> {{-1.1832159566199232`, -0.50709255283711, 
              1.52127765851133}}, "Version" -> {11.3, 0}, "ID" -> 
             6805508875538386472, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
              "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
              "Processors" -> {
               MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                   Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
                 "Version" -> {11.3, 0}, "ID" -> 7785877722652513706, 
                 "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]]]], 
               MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                   Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
                 "Version" -> {11.3, 0}, "ID" -> 6494960019308329035, 
                 "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]]]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
              "Spans" -> {
               Span[1, 1], 
               Span[2, 2]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Weight" -> {1., 1.}, "Type" -> "NominalVector"]], 
             "Version" -> {11.3, 0}, "ID" -> 3525967189646318431]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Weight" -> {1., 1.}, "Type" -> "NominalVector"], "Key" -> 
             "(f1f2)", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Approximate", "Missing" -> 
         "Forbidden"]], "Method" -> "NaiveBayes", "Options" -> 
      Association[
       "SmoothingParameter" -> 
        Association["Value" -> 0.2, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.35484640737343087`, 0.13932958258940584`], "Accuracy" -> 
         PlusMinus[0.75, 0.25000000000000006`], "EvaluationTime" -> 
         0.00022275, "TestSize" -> 3, "TrainingSize" -> 3, "TrainingTime" -> 
         0.0072464999999999995`, "TrainingMemory" -> 48074., "ModelMemory" -> 
         27032., "ExperimentCount" -> 3, "ModelUtility" -> 1.128627486361833, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[0.3664583903931362, 0.23314703179148108`], 
           PlusMinus[0.3484143341097404, 0.24539583302255696`], 
           PlusMinus[0.3484143341097404, 0.24539583302255696`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.75, 0.4330127018922194], 
           PlusMinus[0.75, 0.4330127018922194], 
           PlusMinus[0.75, 0.4330127018922194]}, 
         "Configuration" -> {"NaiveBayes", "SmoothingParameter" -> 0.2}, 
         "FinalTrainingSize" -> 4], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 75028931374071]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.3926750100936321, 0.34665765183495856`], "Accuracy" -> 
              PlusMinus[0.44999999999999996`, 0.2554951619459317], 
              "EvaluationTime" -> 0.00029025000000000003`, "TestSize" -> 3, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.026947, 
              "TrainingMemory" -> 77236., "ModelMemory" -> 21368., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.9349216211040047, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.3467053247271201, 0.24659286566831015`], 
                PlusMinus[1.2531205966417671`, 0.7539866734339672], 
                PlusMinus[0.34657449684320013`, 0.2466847492951387]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.75, 0.4330127018922194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00029025000000000003`, "MeanCrossEntropy" -> 
             PlusMinus[0.3926750100936321, 0.34665765183495856`], 
             "ModelMemory" -> 21368., "TrainingMemory" -> 77236., 
             "TrainingTime" -> 0.02802488], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.35484640737343087`, 0.13932958258940584`], 
              "Accuracy" -> PlusMinus[0.75, 0.25000000000000006`], 
              "EvaluationTime" -> 0.00022275, "TestSize" -> 3, "TrainingSize" -> 
              3, "TrainingTime" -> 0.0072464999999999995`, "TrainingMemory" -> 
              48074., "ModelMemory" -> 27032., "ExperimentCount" -> 3, 
              "ModelUtility" -> 1.128627486361833, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.3664583903931362, 0.23314703179148108`], 
                PlusMinus[0.3484143341097404, 0.24539583302255696`], 
                PlusMinus[0.3484143341097404, 0.24539583302255696`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00022275, "MeanCrossEntropy" -> 
             PlusMinus[0.35484640737343087`, 0.13932958258940584`], 
             "ModelMemory" -> 27032., "TrainingMemory" -> 48074., 
             "TrainingTime" -> 0.00753636], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5493061443340549, 0.10278200081239193`], "Accuracy" -> 
              PlusMinus[0.75, 0.25000000000000006`], "EvaluationTime" -> 
              0.00035775, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.00763275, "TrainingMemory" -> 72266., 
              "ModelMemory" -> 17128., "ExperimentCount" -> 3, "ModelUtility" -> 
              0.7579724128030947, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5493061443340549, 0.17802364751064845`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`], 
                PlusMinus[0.5493061443340549, 0.17802364751064845`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00035775, "MeanCrossEntropy" -> 
             PlusMinus[0.5493061443340549, 0.10278200081239193`], 
             "ModelMemory" -> 17128., "TrainingMemory" -> 72266., 
             "TrainingTime" -> 0.00793806], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.45814536593707755`, 0.10744628112804555`], 
              "Accuracy" -> PlusMinus[0.75, 0.25000000000000006`], 
              "EvaluationTime" -> 0.00027175, "TestSize" -> 3, "TrainingSize" -> 
              3, "TrainingTime" -> 0.005742499999999999, "TrainingMemory" -> 
              55770., "ModelMemory" -> 18768., "ExperimentCount" -> 3, 
              "ModelUtility" -> 0.9005605987134103, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.4581453659370776, 0.18610241799810393`], 
                PlusMinus[0.4581453659370776, 0.18610241799810393`], 
                PlusMinus[0.4581453659370776, 0.18610241799810393`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00027175, "MeanCrossEntropy" -> 
             PlusMinus[0.45814536593707755`, 0.10744628112804555`], 
             "ModelMemory" -> 18768., "TrainingMemory" -> 55770., 
             "TrainingTime" -> 0.0059721999999999996`], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5696766677551848, 0.10544504729428213`], "Accuracy" -> 
              PlusMinus[0.75, 0.25000000000000006`], "EvaluationTime" -> 
              0.0024792499999999997`, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.01330075, "TrainingMemory" -> 146016., 
              "ModelMemory" -> 97808., "ExperimentCount" -> 3, "ModelUtility" -> 
              0.6546373910652403, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5666018667188644, 0.18168690769833823`], 
                PlusMinus[0.5666018667188644, 0.18168690769833823`], 
                PlusMinus[0.5760065326976123, 0.1843305623305385]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0024792499999999997`, "MeanCrossEntropy" -> 
             PlusMinus[0.5696766677551848, 0.10544504729428213`], 
             "ModelMemory" -> 97808., "TrainingMemory" -> 146016., 
             "TrainingTime" -> 0.01383278], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6927713393527621, 0.1422724584535719], "Accuracy" -> 
              PlusMinus[0.44999999999999996`, 0.2554951619459317], 
              "EvaluationTime" -> 0.000258, "TestSize" -> 3, "TrainingSize" -> 
              3, "TrainingTime" -> 0.011029750000000001`, "TrainingMemory" -> 
              71302., "ModelMemory" -> 21368., "ExperimentCount" -> 3, 
              "ModelUtility" -> 0.5988969045565474, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6922093390909643, 0.2460274947774312], 
                PlusMinus[0.6935425658682615, 0.2469632890942404], 
                PlusMinus[0.6925675313836717, 0.24627855087664413`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.75, 0.4330127018922194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000258, "MeanCrossEntropy" -> 
             PlusMinus[0.6927713393527621, 0.1422724584535719], "ModelMemory" -> 
             21368., "TrainingMemory" -> 71302., "TrainingTime" -> 
             0.01147094], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.46351115895085865`, 0.18362235694402906`], 
              "Accuracy" -> 
              PlusMinus[0.44999999999999996`, 0.2554951619459317], 
              "EvaluationTime" -> 0.000269, "TestSize" -> 3, "TrainingSize" -> 
              3, "TrainingTime" -> 0.02258475, "TrainingMemory" -> 77300., 
              "ModelMemory" -> 21368., "ExperimentCount" -> 3, "ModelUtility" -> 
              0.8634729050658214, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.36744531208914943`, 0.23249886221959154`], 
                PlusMinus[0.7113585763822039, 0.2598017003346611], 
                PlusMinus[0.3512058598378712, 0.24345372322946232`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.75, 0.4330127018922194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000269, "MeanCrossEntropy" -> 
             PlusMinus[0.46351115895085865`, 0.18362235694402906`], 
             "ModelMemory" -> 21368., "TrainingMemory" -> 77300., 
             "TrainingTime" -> 0.02348814], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.37867916803770324`, 0.44141863049916513`], 
              "Accuracy" -> 
              PlusMinus[0.44999999999999996`, 0.2554951619459317], 
              "EvaluationTime" -> 0.00029874999999999997`, "TestSize" -> 3, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.0272275, 
              "TrainingMemory" -> 85562., "ModelMemory" -> 21368., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.9249983360977486, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.34657396314606753`, 0.2466851241957122], 
                PlusMinus[1.5660089502159145`, 1.0607790467291511`], 
                PlusMinus[0.3465736054658335, 0.24668537545188615`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.75, 0.4330127018922194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00029874999999999997`, "MeanCrossEntropy" -> 
             PlusMinus[0.37867916803770324`, 0.44141863049916513`], 
             "ModelMemory" -> 21368., "TrainingMemory" -> 85562., 
             "TrainingTime" -> 0.0283166], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6676582905997507, 0.13348865358099515`], "Accuracy" -> 
              PlusMinus[0.44999999999999996`, 0.2554951619459317], 
              "EvaluationTime" -> 0.0002755, "TestSize" -> 3, "TrainingSize" -> 
              3, "TrainingTime" -> 0.01280825, "TrainingMemory" -> 72596., 
              "ModelMemory" -> 21368., "ExperimentCount" -> 3, "ModelUtility" -> 
              0.622072678682323, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.662302481558239, 0.2260865257091532], 
                PlusMinus[0.6941185087981436, 0.24736867206308735`], 
                PlusMinus[0.6518507540813965, 0.21965159633918158`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.75, 0.4330127018922194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002755, "MeanCrossEntropy" -> 
             PlusMinus[0.6676582905997507, 0.13348865358099515`], 
             "ModelMemory" -> 21368., "TrainingMemory" -> 72596., 
             "TrainingTime" -> 0.01332058], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.693139126105381, 0.14242060756198255`], "Accuracy" -> 
              PlusMinus[0.75, 0.25000000000000006`], "EvaluationTime" -> 
              0.000268, "TestSize" -> 3, "TrainingSize" -> 3, "TrainingTime" -> 
              0.009896249999999999, "TrainingMemory" -> 70536., "ModelMemory" -> 
              21368., "ExperimentCount" -> 3, "ModelUtility" -> 
              0.5985670705658144, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931352313692578, 0.2466769924288073], 
                PlusMinus[0.6931451368674312, 0.24668395050992045`], 
                PlusMinus[0.6931370103970972, 0.246678242085589]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000268, "MeanCrossEntropy" -> 
             PlusMinus[0.693139126105381, 0.14242060756198255`], 
             "ModelMemory" -> 21368., "TrainingMemory" -> 70536., 
             "TrainingTime" -> 0.010292099999999998`], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 25], "LearningRate" -> 
             Association["Value" -> 0.02], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 7], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931471805599453, 0.14242387408115745`], "Accuracy" -> 
              PlusMinus[0.44999999999999996`, 0.2554951619459317], 
              "EvaluationTime" -> 0.00022774999999999998`, "TestSize" -> 3, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.010885500000000001`, 
              "TrainingMemory" -> 60344., "ModelMemory" -> 29456., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.5985593083096407, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931471805599452, 0.24668538611935686`], 
                PlusMinus[0.6931471805599452, 0.24668538611935686`], 
                PlusMinus[0.6931471805599452, 0.24668538611935686`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.75, 0.4330127018922194], 
                PlusMinus[0.75, 0.4330127018922194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00022774999999999998`, "MeanCrossEntropy" -> 
             PlusMinus[0.6931471805599453, 0.14242387408115745`], 
             "ModelMemory" -> 29456., "TrainingMemory" -> 60344., 
             "TrainingTime" -> 0.011320920000000002`], "Index" -> 11], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.34717882971968134`, 0.34826508878736795`], 
              "Accuracy" -> PlusMinus[0.75, 0.6123724356957947], 
              "EvaluationTime" -> 0.000273, "TestSize" -> 1, "TrainingSize" -> 
              3, "TrainingTime" -> 0.02566, "TrainingMemory" -> 77256, 
              "ModelMemory" -> 21368, "ExperimentCount" -> 1, "ModelUtility" -> 
              1.0362449842384847`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.34717882971968134`, 0.24626060593208293`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.75, 0.4330127018922194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000273, "MeanCrossEntropy" -> 
             PlusMinus[0.34717882971968134`, 0.34826508878736795`], 
             "ModelMemory" -> 21368, "TrainingMemory" -> 77256, 
             "TrainingTime" -> 0.0266864], "Index" -> 12]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 12], 
        Association["ID" -> 75024636406775]], "MaxTrainingSize" -> 4, 
      "LastReportingTime" -> 3.745203446655043`16.32605040354785*^9, 
      "PreprocessorEvaluationTime" -> 3.90283203125`2.*^-6, 
      "PreprocessorMemory" -> 61048, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 3, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          1.2429919999999999`, "ExperimentCounts" -> 34]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[75033226341367]], "ID" -> 75037521308663]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {130}, "ID" -> 
           7806654962102425149], "f2" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"Smooth"}, "ID" -> 
           5814909113149441914]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 1.771999, "MaxTrainingMemory" -> 891168, "DataMemory" -> 
      840, "FunctionMemory" -> 224576, "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 9, 6, 6, 17, 26.690093`8.178925069131136}, "Instant", 
        "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.745216222401196*^9, 3.74521628138421*^9, 3.745216919803954*^9, {
   3.745217780254348*^9, 3.745217805702899*^9}, 3.7452178467305927`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"d6d36e8a-a10d-455e-afc1-ed5c8a10e650"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "[", 
  RowBox[{
   RowBox[{"c1", "[", 
    RowBox[{"{", 
     RowBox[{"155", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"c2", "[", 
    RowBox[{"{", 
     RowBox[{"155", ",", "\"\<Bumpy\>\""}], "}"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7452163399595633`*^9, 3.7452163800383797`*^9}, {
  3.745217327806134*^9, 3.74521734706631*^9}, {3.745217813575651*^9, 
  3.7452178138295507`*^9}, {3.745217936557846*^9, 3.745218025192503*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"47571d75-a0f6-4e5f-8210-8c65b3330a59"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "\<\"Orange\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.74521802570757*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"8252f004-9055-4a00-8611-c32fff03108c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "[", 
  RowBox[{
   RowBox[{"c1", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"125", ",", "1"}], "}"}], ",", "\"\<TopProbabilities\>\""}], 
    "]"}], ",", 
   RowBox[{"c2", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"125", ",", "\"\<Smooth\>\""}], "}"}], ",", 
     "\"\<TopProbabilities\>\""}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7452164221195917`*^9, 3.745216441540016*^9}, {
  3.745218094113659*^9, 3.745218123036867*^9}, {3.7452181563033743`*^9, 
  3.745218159380788*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"43234ab7-dee8-45f0-91a0-7e9eb30d4dab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0", "\[Rule]", "0.7499999999999999`"}], ",", 
     RowBox[{"1", "\[Rule]", "0.25`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Apple\"\>", "\[Rule]", "0.9977375565610861`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.745216442556097*^9, 3.745216954608884*^9, 
  3.745217268030241*^9, 3.745217527181568*^9, 3.7452175971911373`*^9, 
  3.745218123537018*^9, 3.745218161370886*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"52af0d5e-2357-4b95-8e3b-3d259368b241"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "[", 
  RowBox[{
   RowBox[{"ClassifierInformation", "[", "c1", "]"}], ",", 
   RowBox[{"ClassifierInformation", "[", "c2", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.745216984502549*^9, 3.7452169961905518`*^9}, {
  3.7452183967985497`*^9, 3.745218413383017*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"38f5becd-8f1c-4340-ac49-3a867fa402c6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    StyleBox[
     FrameBox[GridBox[{
        {
         ItemBox[
          FrameBox[
           StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
            StripOnInput->False,
            FontSize->12,
            FontWeight->Bold],
           FrameMargins->{{10, 5}, {-5, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Alignment->{Left, Bottom},
          Background->RGBColor[0.93119, 0.93119, 0.93119],
          Frame->{{False, False}, {True, False}},
          FrameStyle->Opacity[0.1],
          ItemSize->{Automatic, 1},
          StripOnInput->False]},
        {
         ItemBox[
          TagBox[
           FrameBox[
            TagBox[GridBox[{
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                RowBox[{"{", 
                 RowBox[{"\<\"Numerical\"\>", ",", "\<\"Numerical\"\>"}], 
                 "}"}]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{",","\",\"","0","1"},
                 "RowWithSeparators"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox["\<\"DecisionTree\"\>",
                  TemplateBox[{
                    TagBox[
                    
                    DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 2, "Length" -> 2, "InitialType" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "DistributionSmoothing", "FeatureFraction"]], 
                    TypeSystem`Atom[Integer], 2], "Shape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[189.], 
                    TypeSystem`PackageScope`AtomShape[34]]], 2, {}], 
                    "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[2004553995], "Type" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "DistributionSmoothing", "FeatureFraction"]], 
                    TypeSystem`Atom[Integer], 2], "HandleQ" -> True, 
                    "RowTarget" -> 20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[2004553995]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["DistributionSmoothing", 
                    Style[
                    "DistributionSmoothing", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1093319848][{
                    Key["DistributionSmoothing"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1093319848][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], 
                    ImageSize -> {{189., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1093319848][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["FeatureFraction", 
                    Style[
                    "FeatureFraction", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1093319848][{
                    Key["FeatureFraction"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1093319848][
                    GeneralUtilities`Slice[
                    Key["FeatureFraction"]]], "Mouse"], 
                    ImageSize -> {{189., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1093319848][
                    GeneralUtilities`Slice[
                    Key["FeatureFraction"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1093319848][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1093319848]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1093319848][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1093319848][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                    DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                   DisplayFunction -> (#& ), 
                   InterpretationFunction -> ("Dataset[<>]"& )]],
                 Annotation[#, 
                  Dataset[
                   Association[
                   "DistributionSmoothing" -> 1, "FeatureFraction" -> 1], 
                   TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "DistributionSmoothing", "FeatureFraction"]], 
                    TypeSystem`Atom[Integer], 2], 
                   Association["ID" -> 268538682895918]], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  
                  TemplateBox[{
                   TemplateBox[{
                    "37.4999999999999928946`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                    StyleBox[
                    TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "8.1385756151478005904`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  
                  TemplateBox[{
                   "\"95% confidence interval: [\"", 
                    "0.212228487697043916`3.", "\", \"", 
                    "0.5377715123029559452`3.", "\"]\""}, "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", 0.212228487697043916`3., 
                    ", ", 0.5377715123029559452`3., "]"}], "Tooltip"]& ]},
               {
                TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                   TagBox[
                    TooltipBox[
                    "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  TemplateBox[{"0.6056511703050770912`3.",StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0526069999129371371`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  
                  TemplateBox[{
                   "\"95% confidence interval: [\"", 
                    "0.5004371704792027753`3.", "\", \"", 
                    "0.710865170130951407`3.", "\"]\""}, "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", 0.5004371704792027753`3.,
                     ", ", 0.710865170130951407`3., "]"}], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Single evaluation time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "1.63`",
                  RowBox[{
                   "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}],
                  "milliseconds per example",FractionBox[
                  "\"Milliseconds\"", "\"Examples\""]},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Batch evaluation speed\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "228.`",
                  RowBox[{
                   "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}],
                  "examples per millisecond",FractionBox[
                  "\"Examples\"", "\"Milliseconds\""]},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"116.`","\"kB\"","kilobytes","\"Kilobytes\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Training examples used\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"4","\"examples\"","examples","\"Examples\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "855.`","\"ms\"","milliseconds","\"Milliseconds\""},
                 "Quantity"]}
              },
              AutoDelete->False,
              ColumnsEqual->False,
              
              GridBoxAlignment->{
               "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
                "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
              GridBoxDividers->{"Columns" -> {False, {
                   Opacity[0.15]}, False}},
              
              GridBoxItemSize->{
               "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
                "Rows" -> {{1.}}, "RowsIndexed" -> {}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], 
                  Offset[1.1199999999999999`], {
                   Offset[1.75]}, 
                  Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                "Rows" -> {
                  Offset[0.2], {
                   Offset[0.8]}, 
                  Offset[0.2]}, "RowsIndexed" -> {}}],
             "Grid"],
            FrameMargins->{{10, 10}, {10, 5}},
            FrameStyle->None,
            StripOnInput->False],
           Deploy,
           DefaultBaseStyle->"Deploy"],
          Alignment->Center,
          
          BaseStyle->{
           FontWeight -> "Light", FontSize -> 12, FontFamily -> ".SF NS Text",
             NumberMarks -> False, Deployed -> False},
          StripOnInput->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{
        "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
          "RowsIndexed" -> {}},
       GridBoxDividers->{
        "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
         "RowsIndexed" -> {}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
         "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], 
           Offset[1.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}],
      Background->RGBColor[0.9802, 0.9802, 0.9802],
      FrameMargins->{{0, 0}, {0, 0}},
      FrameStyle->GrayLevel[0.85],
      RoundingRadius->5,
      StripOnInput->False],
     StripOnInput->False,
     LineBreakWithin->False],
    Deploy,
    DefaultBaseStyle->"Deploy"], ",", 
   TagBox[
    StyleBox[
     FrameBox[GridBox[{
        {
         ItemBox[
          FrameBox[
           StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
            StripOnInput->False,
            FontSize->12,
            FontWeight->Bold],
           FrameMargins->{{10, 5}, {-5, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Alignment->{Left, Bottom},
          Background->RGBColor[0.93119, 0.93119, 0.93119],
          Frame->{{False, False}, {True, False}},
          FrameStyle->Opacity[0.1],
          ItemSize->{Automatic, 1},
          StripOnInput->False]},
        {
         ItemBox[
          TagBox[
           FrameBox[
            TagBox[GridBox[{
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                RowBox[{"{", 
                 RowBox[{"\<\"Numerical\"\>", ",", "\<\"Nominal\"\>"}], "}"}]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{",","\",\"","\"Apple\"","\"Orange\""},
                 "RowWithSeparators"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox["\<\"NaiveBayes\"\>",
                  TemplateBox[{
                    TagBox[
                    
                    DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 1, "Length" -> 1, "InitialType" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], 1], "Shape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[172.8], 
                    TypeSystem`PackageScope`AtomShape[60]]], 1, {}], 
                    "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[367932821], "Type" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], 1], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[367932821]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["SmoothingParameter", 
                    Style[
                    "SmoothingParameter", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1346686613][{
                    Key["SmoothingParameter"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1346686613][
                    GeneralUtilities`Slice[
                    Key["SmoothingParameter"]]], "Mouse"], 
                    ImageSize -> {{172.8, Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0.2"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1346686613][
                    GeneralUtilities`Slice[
                    Key["SmoothingParameter"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1346686613][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1346686613]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1346686613][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1346686613][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                    DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                   DisplayFunction -> (#& ), 
                   InterpretationFunction -> ("Dataset[<>]"& )]],
                 Annotation[#, 
                  Dataset[
                   Association["SmoothingParameter" -> 0.2], 
                   TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], 1], 
                   Association["ID" -> 56878399581743]], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  
                  TemplateBox[{
                   TemplateBox[{"75.`3.", "\"%\"", "percent", "\"Percent\""}, 
                    "QuantityPostfix", SyntaxForm -> Mod],StyleBox[
                    TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "25.0000000000000071054`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  
                  TemplateBox[{
                   "\"95% confidence interval: [\"", 
                    "0.249999999999999889`3.", "\", \"", "1.25`3.", "\"]\""}, 
                   "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", 0.249999999999999889`3., 
                    ", ", 1.25`3., "]"}], "Tooltip"]& ]},
               {
                TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                   TagBox[
                    TooltipBox[
                    "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  TemplateBox[{"0.3548464073734308721`3.",StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1393295825894058371`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  
                  TemplateBox[{
                   "\"95% confidence interval: [\"", 
                    "0.076187242194619198`3.", "\", \"", 
                    "0.6335055725522424908`3.", "\"]\""}, "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", 0.076187242194619198`3., 
                    ", ", 0.6335055725522424908`3., "]"}], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Single evaluation time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "3.31`",
                  RowBox[{
                   "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}],
                  "milliseconds per example",FractionBox[
                  "\"Milliseconds\"", "\"Examples\""]},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Batch evaluation speed\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "73.5`",
                  RowBox[{
                   "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}],
                  "examples per millisecond",FractionBox[
                  "\"Examples\"", "\"Milliseconds\""]},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"227.`","\"kB\"","kilobytes","\"Kilobytes\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Training examples used\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"4","\"examples\"","examples","\"Examples\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"1.77`","\"s\"","seconds","\"Seconds\""},
                 "Quantity"]}
              },
              AutoDelete->False,
              ColumnsEqual->False,
              
              GridBoxAlignment->{
               "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
                "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
              GridBoxDividers->{"Columns" -> {False, {
                   Opacity[0.15]}, False}},
              
              GridBoxItemSize->{
               "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
                "Rows" -> {{1.}}, "RowsIndexed" -> {}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], 
                  Offset[1.1199999999999999`], {
                   Offset[1.75]}, 
                  Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                "Rows" -> {
                  Offset[0.2], {
                   Offset[0.8]}, 
                  Offset[0.2]}, "RowsIndexed" -> {}}],
             "Grid"],
            FrameMargins->{{10, 10}, {10, 5}},
            FrameStyle->None,
            StripOnInput->False],
           Deploy,
           DefaultBaseStyle->"Deploy"],
          Alignment->Center,
          
          BaseStyle->{
           FontWeight -> "Light", FontSize -> 12, FontFamily -> ".SF NS Text",
             NumberMarks -> False, Deployed -> False},
          StripOnInput->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{
        "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
          "RowsIndexed" -> {}},
       GridBoxDividers->{
        "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
         "RowsIndexed" -> {}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
         "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], 
           Offset[1.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}],
      Background->RGBColor[0.9802, 0.9802, 0.9802],
      FrameMargins->{{0, 0}, {0, 0}},
      FrameStyle->GrayLevel[0.85],
      RoundingRadius->5,
      StripOnInput->False],
     StripOnInput->False,
     LineBreakWithin->False],
    Deploy,
    DefaultBaseStyle->"Deploy"]}], "}"}]], "Output",
 CellChangeTimes->{3.74521699737894*^9, 3.745217615259307*^9, 
  3.7452184154074306`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"1056b8b7-02ea-462a-8b7d-746f8cd34131"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "[", 
  RowBox[{
   RowBox[{"ClassifierInformation", "[", 
    RowBox[{"c1", ",", "\"\<LearningCurve\>\""}], "]"}], ",", 
   RowBox[{"ClassifierInformation", "[", 
    RowBox[{"c2", ",", "\"\<LearningCurve\>\""}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.745218787290658*^9, 3.745218802146655*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"bce58246-aaef-454f-944e-7ef466e85d17"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   DynamicModuleBox[{MachineLearning`file4Automation`PackagePrivate`pos$$ = 
    3}, 
    DynamicBox[ToBoxes[
      Show[
       Part[{
         Graphics[{{{{}, {{{}, {}, {
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 PointSize[0.012833333333333334`], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6]], 
                
                Line[{{1.0986122886681098`, -0.5014510852086739}, {
                 1.0986122886681098`, -0.5014510852086739}}]}, {
                Hue[0.9060679774997897, 0.6, 0.6], 
                Directive[
                 Opacity[0]], 
                
                Line[{{1.0986122886681098`, -0.6837726420026284}, {
                 1.0986122886681098`, -0.3191295284147192}}]}}, {{
                Directive[
                 PointSize[0.012833333333333334`], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6], 
                 AbsolutePointSize[6]], 
                GeometricTransformation[
                 Inset[
                  Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                 1.0986122886681098`, -0.5014510852086739}}, {{
                 1.0986122886681098`, -0.5014510852086739}}}]}, {
                Directive[
                 Opacity[0]], 
                GeometricTransformation[
                 Inset[
                  Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                 1.0986122886681098`, -0.6837726420026284}}, {{
                 1.0986122886681098`, -0.3191295284147192}}}]}, {}}}, {}, {}, \
{}, {}}}, {{{}, {{{}, {}, {
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 PointSize[0.012833333333333334`], 
                 AbsoluteThickness[1.6], 
                 RGBColor[0.368417, 0.506779, 0.709798]], 
                
                Line[{{1.0986122886681098`, -0.5923174065227351}, {
                 1.0986122886681098`, -0.4181580686538608}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
           GridLines -> {
            Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
             Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
           DisplayFunction -> Identity, DisplayFunction -> Identity, 
           DisplayFunction -> Identity, PlotRangePadding -> {{
              Scaled[0.02], 0}, {
              Scaled[0.02], 
              Scaled[0.05]}}, 
           AxesOrigin -> {1.0882480657330498`, -0.7102386744404607}, 
           PlotRange -> {{1.0927412259650122`, 
              Log[4]}, {-0.7040305927575123, -0.3191295284147192}}, 
           PlotRangeClipping -> True, ImagePadding -> {{30, 10}, {37, 0}}, 
           DisplayFunction -> Identity, AspectRatio -> GoldenRatio^(-1), 
           Axes -> {True, True}, AxesLabel -> {None, None}, 
           AxesOrigin -> {1.0882480657330498`, -0.7102386744404607}, 
           DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}},
            FrameLabel -> {{None, None}, {"training examples used", None}}, 
           FrameTicks -> {{
              Charting`ScaledTicks[{Log, Exp}], {}}, {
              Charting`ScaledTicks[{Log, Exp}], {}}}, 
           GridLines -> {
            Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
             Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
           GridLinesStyle -> Directive[
             GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
           ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, LabelStyle -> 
           10, Method -> {
            "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                 (Exp[#]& )[
                  Part[#, 1]], 
                 (Exp[#]& )[
                  Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                 (Exp[#]& )[
                  Part[#, 1]], 
                 (Exp[#]& )[
                  Part[#, 2]]}& )}}, PlotRange -> {{1.0927412259650122`, 
              Log[4]}, {-0.7040305927575123, -0.3191295284147192}}, 
           PlotRangeClipping -> True, PlotRangePadding -> {{
              Scaled[0.02], 0}, {
              Scaled[0.02], 
              Scaled[0.05]}}, Ticks -> {
             Charting`ScaledTicks[{Log, Exp}], 
             Charting`ScaledTicks[{Log, Exp}]}}], 
         Graphics[{{{}, {{{}, {}, {
               Hue[0.67, 0.6, 0.6], 
               Directive[
                PointSize[0.012833333333333334`], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[1.6]], 
               
               Line[{{1.0986122886681098`, 0.37499999999999994`}, {
                1.0986122886681098`, 0.37499999999999994`}}]}, {
               Hue[0.9060679774997897, 0.6, 0.6], 
               Directive[
                Opacity[0]], 
               
               Line[{{1.0986122886681098`, 0.31249999999999994`}, {
                1.0986122886681098`, 0.4499999999999999}}]}}, {{
               Directive[
                PointSize[0.012833333333333334`], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[1.6], 
                AbsolutePointSize[6]], 
               GeometricTransformation[
                Inset[
                 Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                1.0986122886681098`, 0.37499999999999994`}}, {{
                1.0986122886681098`, 0.37499999999999994`}}}]}, {
               Directive[
                Opacity[0]], 
               GeometricTransformation[
                Inset[
                 Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                1.0986122886681098`, 0.31249999999999994`}}, {{
                1.0986122886681098`, 
                0.4499999999999999}}}]}, {}}}, {}, {}, {}, {}}}, {
          DisplayFunction -> Identity, 
           GridLines -> {
            Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
             Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6, 
              6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
           Identity, DisplayFunction -> Identity, PlotRangePadding -> {{
              Scaled[0.02], 0}, {
              Scaled[0.05], 0}}, 
           AxesOrigin -> {1.0882480657330498`, 0.2799342105263158}, 
           PlotRange -> {{1.0927412259650122`, 
              Log[4]}, {0.31249999999999994`, 1}}, PlotRangeClipping -> True, 
           ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> Identity, 
           AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
           AxesLabel -> {None, None}, 
           AxesOrigin -> {1.0882480657330498`, 0.2799342105263158}, 
           DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}},
            FrameLabel -> {{None, None}, {"training examples used", None}}, 
           FrameTicks -> {{Automatic, None}, {
              Charting`ScaledTicks[{Log, Exp}], {}}}, 
           GridLines -> {
            Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
             Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6, 
              6}]& }, GridLinesStyle -> Directive[
             GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
           ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, LabelStyle -> 
           10, Method -> {
            "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                 (Exp[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                 (Exp[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& )}}, PlotRange -> {{1.0927412259650122`, 
              Log[4]}, {0.31249999999999994`, 1}}, PlotRangeClipping -> True, 
           PlotRangePadding -> {{
              Scaled[0.02], 0}, {
              Scaled[0.05], 0}}, Ticks -> {
             Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
         Graphics[{{{{}, {{{}, {}, 
               Tooltip[{
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  AbsoluteThickness[1.6]], 
                 
                 Line[{{1.0986122886681098`, -0.5014510852086739}, {
                  1.0986122886681098`, -0.5014510852086739}}]}, 
                "DecisionTree"]}}, {}, {}, {}, {}}}}, {
          DisplayFunction -> Identity, 
           GridLines -> {
            Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
             Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
           DisplayFunction -> Identity, DisplayFunction -> Identity, 
           DisplayFunction -> Identity, PlotRangePadding -> {{
              Scaled[0.02], 0}, {
              Scaled[0.02], 
              Scaled[0.05]}}, 
           AxesOrigin -> {1.0882480657330498`, -1.0756934569798973`}, 
           PlotRange -> {{1.0927412259650122`, 
              Log[4]}, {-1.058618957662756, 0}}, PlotRangeClipping -> True, 
           ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> Identity, 
           AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
           AxesLabel -> {None, None}, 
           AxesOrigin -> {1.0882480657330498`, -1.0756934569798973`}, 
           DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}},
            FrameLabel -> {{None, None}, {"training examples used", None}}, 
           FrameTicks -> {{
              Charting`ScaledTicks[{Log, Exp}], {}}, {
              Charting`ScaledTicks[{Log, Exp}], {}}}, 
           GridLines -> {
            Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
             Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
           GridLinesStyle -> Directive[
             GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
           ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, LabelStyle -> 
           10, Method -> {
            "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                 (Exp[#]& )[
                  Part[#, 1]], 
                 (Exp[#]& )[
                  Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                 (Exp[#]& )[
                  Part[#, 1]], 
                 (Exp[#]& )[
                  Part[#, 2]]}& )}}, PlotRange -> {{1.0927412259650122`, 
              Log[4]}, {-1.058618957662756, 0}}, PlotRangeClipping -> True, 
           PlotRangePadding -> {{
              Scaled[0.02], 0}, {
              Scaled[0.02], 
              Scaled[0.05]}}, Ticks -> {
             Charting`ScaledTicks[{Log, Exp}], 
             Charting`ScaledTicks[{Log, Exp}]}}]}, 
        MachineLearning`file4Automation`PackagePrivate`pos$$], PlotLabel -> 
       Grid[{{
           Button[
            Deploy[
             MouseAppearance[
              Mouseover[
               Graphics[{
                 GrayLevel[0.25], 
                 Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                ImageSize -> {Automatic, 10}, 
                ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                Scaled[0.1]], 
               Graphics[{
                 RGBColor[
                 0.27450980392156865`, 0.5372549019607843, 0.792156862745098], 
                 Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                ImageSize -> {Automatic, 10}, 
                ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                Scaled[0.1]]], "LinkHand"]], 
            MachineLearning`file4Automation`PackagePrivate`pos$$ = 
            Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 1, 1], 
            Appearance -> "Frameless"], 
           Part[{
             Tooltip[
             "Learning curve", 
              "mean cross entropy for best algorithm at each training size"], 
             "Accuracy", 
             Tooltip[
             "Learning curves for all algorithms", 
              "mean cross entropy at each training size"]}, 
            MachineLearning`file4Automation`PackagePrivate`pos$$], 
           Button[
            Deploy[
             MouseAppearance[
              Mouseover[
               Graphics[{
                 GrayLevel[0.25], 
                 Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                ImageSize -> {Automatic, 10}, 
                ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                Scaled[0.1]], 
               Graphics[{
                 RGBColor[
                 0.27450980392156865`, 0.5372549019607843, 0.792156862745098], 
                 Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                ImageSize -> {Automatic, 10}, 
                ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                Scaled[0.1]]], "LinkHand"]], 
            MachineLearning`file4Automation`PackagePrivate`pos$$ = 
            Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 1, 
              Length[{
                Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -0.5014510852086739}, {
                    1.0986122886681098`, -0.5014510852086739}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{1.0986122886681098`, -0.6837726420026284}, {
                    1.0986122886681098`, -0.3191295284147192}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    1.0986122886681098`, -0.5014510852086739}}, {{
                    1.0986122886681098`, -0.5014510852086739}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    1.0986122886681098`, -0.6837726420026284}}, {{
                    1.0986122886681098`, -0.3191295284147192}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{1.0986122886681098`, -0.5923174065227351}, {
                    
                    1.0986122886681098`, -0.4181580686538608}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                  GridLines -> {
                   Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                  DisplayFunction -> Identity, DisplayFunction -> Identity, 
                  DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                  AxesOrigin -> {1.0882480657330498`, -0.7102386744404607}, 
                  PlotRange -> {{1.0927412259650122`, 
                    Log[4]}, {-0.7040305927575123, -0.3191295284147192}}, 
                  PlotRangeClipping -> True, 
                  ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                  Identity, AspectRatio -> GoldenRatio^(-1), 
                  Axes -> {True, True}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {1.0882480657330498`, -0.7102386744404607}, 
                  DisplayFunction :> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                  GridLines -> {
                   Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                  GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                  ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                  LabelStyle -> 10, 
                  Method -> {
                   "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{1.0927412259650122`, 
                    Log[4]}, {-0.7040305927575123, -0.3191295284147192}}, 
                  PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, 0.37499999999999994`}, {
                    1.0986122886681098`, 0.37499999999999994`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{1.0986122886681098`, 0.31249999999999994`}, {
                    1.0986122886681098`, 0.4499999999999999}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    1.0986122886681098`, 0.37499999999999994`}}, {{
                    1.0986122886681098`, 0.37499999999999994`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    1.0986122886681098`, 0.31249999999999994`}}, {{
                    1.0986122886681098`, 
                    0.4499999999999999}}}]}, {}}}, {}, {}, {}, {}}}, {
                 DisplayFunction -> Identity, 
                  GridLines -> {
                   Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                  Identity, DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                  AxesOrigin -> {1.0882480657330498`, 0.2799342105263158}, 
                  PlotRange -> {{1.0927412259650122`, 
                    Log[4]}, {0.31249999999999994`, 1}}, PlotRangeClipping -> 
                  True, ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                  Identity, AspectRatio -> GoldenRatio^(-1), 
                  Axes -> {True, True}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {1.0882480657330498`, 0.2799342105263158}, 
                  DisplayFunction :> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                  FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                  GridLines -> {
                   Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                  ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                  LabelStyle -> 10, 
                  Method -> {
                   "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{1.0927412259650122`, 
                    Log[4]}, {0.31249999999999994`, 1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -0.5014510852086739}, {
                    1.0986122886681098`, -0.5014510852086739}}]}, 
                    "DecisionTree"]}}, {}, {}, {}, {}}}}, {
                 DisplayFunction -> Identity, 
                  GridLines -> {
                   Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                  DisplayFunction -> Identity, DisplayFunction -> Identity, 
                  DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                  AxesOrigin -> {1.0882480657330498`, -1.0756934569798973`}, 
                  PlotRange -> {{1.0927412259650122`, 
                    Log[4]}, {-1.058618957662756, 0}}, PlotRangeClipping -> 
                  True, ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                  Identity, AspectRatio -> GoldenRatio^(-1), 
                  Axes -> {True, True}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {1.0882480657330498`, -1.0756934569798973`}, 
                  DisplayFunction :> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                  GridLines -> {
                   Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                  GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                  ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                  LabelStyle -> 10, 
                  Method -> {
                   "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{1.0927412259650122`, 
                    Log[4]}, {-1.058618957662756, 0}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
            "Frameless"]}}, Alignment -> {Center, Baseline}, 
         ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
     ImageSizeCache->{330., {118., 123.}}],
    DynamicModuleValues:>{}], ",", 
   DynamicModuleBox[{MachineLearning`file4Automation`PackagePrivate`pos$$ = 
    1}, 
    DynamicBox[ToBoxes[
      Show[
       Part[{
         Graphics[{{{{}, {{{}, {}, {
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 PointSize[0.012833333333333334`], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6]], 
                
                Line[{{1.0986122886681098`, -1.0360702384151348`}, {
                 1.0986122886681098`, -1.0360702384151348`}}]}, {
                Hue[0.9060679774997897, 0.6, 0.6], 
                Directive[
                 Opacity[0]], 
                
                Line[{{1.0986122886681098`, -1.2183917952090895`}, {
                 1.0986122886681098`, -0.8537486816211802}}]}}, {{
                Directive[
                 PointSize[0.012833333333333334`], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6], 
                 AbsolutePointSize[6]], 
                GeometricTransformation[
                 Inset[
                  Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                 1.0986122886681098`, -1.0360702384151348`}}, {{
                 1.0986122886681098`, -1.0360702384151348`}}}]}, {
                Directive[
                 Opacity[0]], 
                GeometricTransformation[
                 Inset[
                  Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                 1.0986122886681098`, -1.2183917952090895`}}, {{
                 1.0986122886681098`, -0.8537486816211802}}}]}, {}}}, {}, {}, \
{}, {}}}, {{{}, {{{}, {}, {
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 PointSize[0.012833333333333334`], 
                 AbsoluteThickness[1.6], 
                 RGBColor[0.368417, 0.506779, 0.709798]], 
                
                Line[{{1.0986122886681098`, -1.534716299242156}, {
                 1.0986122886681098`, -0.7048635702524547}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
           GridLines -> {
            Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
             Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
           DisplayFunction -> Identity, DisplayFunction -> Identity, 
           DisplayFunction -> Identity, PlotRangePadding -> {{
              Scaled[0.02], 0}, {
              Scaled[0.02], 
              Scaled[0.05]}}, 
           AxesOrigin -> {1.0882480657330498`, -1.2448578276469218`}, 
           PlotRange -> {{1.0927412259650122`, 
              Log[4]}, {-1.2386497459639734`, -0.8537486816211802}}, 
           PlotRangeClipping -> True, ImagePadding -> {{30, 10}, {37, 0}}, 
           DisplayFunction -> Identity, AspectRatio -> GoldenRatio^(-1), 
           Axes -> {True, True}, AxesLabel -> {None, None}, 
           AxesOrigin -> {1.0882480657330498`, -1.2448578276469218`}, 
           DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}},
            FrameLabel -> {{None, None}, {"training examples used", None}}, 
           FrameTicks -> {{
              Charting`ScaledTicks[{Log, Exp}], {}}, {
              Charting`ScaledTicks[{Log, Exp}], {}}}, 
           GridLines -> {
            Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
             Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
           GridLinesStyle -> Directive[
             GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
           ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, LabelStyle -> 
           10, Method -> {
            "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                 (Exp[#]& )[
                  Part[#, 1]], 
                 (Exp[#]& )[
                  Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                 (Exp[#]& )[
                  Part[#, 1]], 
                 (Exp[#]& )[
                  Part[#, 2]]}& )}}, PlotRange -> {{1.0927412259650122`, 
              Log[4]}, {-1.2386497459639734`, -0.8537486816211802}}, 
           PlotRangeClipping -> True, PlotRangePadding -> {{
              Scaled[0.02], 0}, {
              Scaled[0.02], 
              Scaled[0.05]}}, Ticks -> {
             Charting`ScaledTicks[{Log, Exp}], 
             Charting`ScaledTicks[{Log, Exp}]}}], 
         Graphics[{{{}, {{{}, {}, {
               Hue[0.67, 0.6, 0.6], 
               Directive[
                PointSize[0.012833333333333334`], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[1.6]], 
               
               Line[{{1.0986122886681098`, 0.75}, {1.0986122886681098`, 
                0.75}}]}, {
               Hue[0.9060679774997897, 0.6, 0.6], 
               Directive[
                Opacity[0]], 
               
               Line[{{1.0986122886681098`, 0.625}, {1.0986122886681098`, 
                0.8999999999999999}}]}}, {{
               Directive[
                PointSize[0.012833333333333334`], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[1.6], 
                AbsolutePointSize[6]], 
               GeometricTransformation[
                Inset[
                 Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                1.0986122886681098`, 0.75}}, {{1.0986122886681098`, 
                0.75}}}]}, {
               Directive[
                Opacity[0]], 
               GeometricTransformation[
                Inset[
                 Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                1.0986122886681098`, 0.625}}, {{1.0986122886681098`, 
                0.8999999999999999}}}]}, {}}}, {}, {}, {}, {}}}, {
          DisplayFunction -> Identity, 
           GridLines -> {
            Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
             Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6, 
              6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
           Identity, DisplayFunction -> Identity, PlotRangePadding -> {{
              Scaled[0.02], 0}, {
              Scaled[0.05], 0}}, 
           AxesOrigin -> {1.0882480657330498`, 0.6072368421052632}, 
           PlotRange -> {{1.0927412259650122`, 
              Log[4]}, {0.625, 1}}, PlotRangeClipping -> True, 
           ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> Identity, 
           AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
           AxesLabel -> {None, None}, 
           AxesOrigin -> {1.0882480657330498`, 0.6072368421052632}, 
           DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}},
            FrameLabel -> {{None, None}, {"training examples used", None}}, 
           FrameTicks -> {{Automatic, None}, {
              Charting`ScaledTicks[{Log, Exp}], {}}}, 
           GridLines -> {
            Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
             Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6, 
              6}]& }, GridLinesStyle -> Directive[
             GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
           ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, LabelStyle -> 
           10, Method -> {
            "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                 (Exp[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                 (Exp[#]& )[
                  Part[#, 1]], 
                 (Identity[#]& )[
                  Part[#, 2]]}& )}}, PlotRange -> {{1.0927412259650122`, 
              Log[4]}, {0.625, 1}}, PlotRangeClipping -> True, 
           PlotRangePadding -> {{
              Scaled[0.02], 0}, {
              Scaled[0.05], 0}}, Ticks -> {
             Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
         Graphics[{{{{}, {{{}, {}, 
               Tooltip[{
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  AbsoluteThickness[1.6]], 
                 
                 Line[{{1.0986122886681098`, -0.934772955548242}, {
                  1.0986122886681098`, -0.934772955548242}}]}, 
                "LogisticRegression"], 
               Tooltip[{
                 Hue[0.9060679774997897, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.880722, 0.611041, 0.142051], 
                  AbsoluteThickness[1.6]], 
                 
                 Line[{{1.0986122886681098`, -1.0360702384151348`}, {
                  1.0986122886681098`, -1.0360702384151348`}}]}, 
                "NaiveBayes"], 
               Tooltip[{
                 Hue[0.1421359549995791, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.560181, 0.691569, 0.194885], 
                  AbsoluteThickness[1.6]], 
                 
                 Line[{{1.0986122886681098`, -0.5990993529432462}, {
                  1.0986122886681098`, -0.5990993529432462}}]}, 
                "DecisionTree"], 
               Tooltip[{
                 Hue[0.37820393249936934`, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.922526, 0.385626, 0.209179], 
                  AbsoluteThickness[1.6]], 
                 
                 Line[{{1.0986122886681098`, -0.7805687523507003}, {
                  1.0986122886681098`, -0.7805687523507003}}]}, 
                "NearestNeighbors"], 
               Tooltip[{
                 Hue[0.6142719099991583, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.528488, 0.470624, 0.701351], 
                  AbsoluteThickness[1.6]], 
                 
                 Line[{{1.0986122886681098`, -0.5626863286527435}, {
                  1.0986122886681098`, -0.5626863286527435}}]}, 
                "RandomForest"], 
               Tooltip[{
                 Hue[0.8503398874989481, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.772079, 0.431554, 0.102387], 
                  AbsoluteThickness[1.6]], 
                 
                 Line[{{1.0986122886681098`, -0.3670552918841564}, {
                  1.0986122886681098`, -0.3670552918841564}}]}, 
                "LogisticRegression"], 
               Tooltip[{
                 Hue[0.08640786499873876, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.363898, 0.618501, 0.782349], 
                  AbsoluteThickness[1.6]], 
                 
                 Line[{{1.0986122886681098`, -0.7689248188596519}, {
                  1.0986122886681098`, -0.7689248188596519}}]}, 
                "LogisticRegression"], 
               Tooltip[{
                 Hue[0.3224758424985268, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[1, 0.75, 0], 
                  AbsoluteThickness[1.6]], 
                 
                 Line[{{1.0986122886681098`, -0.9710659547300308}, {
                  1.0986122886681098`, -0.9710659547300308}}]}, 
                "LogisticRegression"], 
               Tooltip[{
                 Hue[0.5585438199983166, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.647624, 0.37816, 0.614037], 
                  AbsoluteThickness[1.6]], 
                 
                 Line[{{1.0986122886681098`, -0.4039787773455715}, {
                  1.0986122886681098`, -0.4039787773455715}}]}, 
                "LogisticRegression"], 
               Tooltip[{
                 Hue[0.7946117974981064, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.571589, 0.586483, 0.], 
                  AbsoluteThickness[1.6]], 
                 
                 Line[{{1.0986122886681098`, -0.3665245407708355}, {
                  1.0986122886681098`, -0.3665245407708355}}]}, 
                "LogisticRegression"], 
               Tooltip[{
                 Hue[0.030679774997896203`, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.915, 0.3325, 0.2125], 
                  AbsoluteThickness[1.6]], 
                 
                 Line[{{1.0986122886681098`, -0.36651292058166435`}, {
                  1.0986122886681098`, -0.36651292058166435`}}]}, 
                "GradientBoostedTrees"], 
               Tooltip[{
                 Hue[0.266747752497686, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                  AbsoluteThickness[1.6]], 
                 
                 Line[{{1.0986122886681098`, -1.0579152723646243`}, {
                  1.0986122886681098`, -1.0579152723646243`}}]}, 
                "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
          DisplayFunction -> Identity, 
           GridLines -> {
            Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
             Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
           DisplayFunction -> Identity, DisplayFunction -> Identity, 
           DisplayFunction -> Identity, PlotRangePadding -> {{
              Scaled[0.02], 0}, {
              Scaled[0.02], 
              Scaled[0.05]}}, 
           AxesOrigin -> {1.0882480657330498`, -1.1080977011230653`}, 
           PlotRange -> {{1.0927412259650122`, 
              Log[4]}, {-1.0963265141303444`, -0.36651292058166435`}}, 
           PlotRangeClipping -> True, ImagePadding -> {{30, 10}, {37, 0}}, 
           DisplayFunction -> Identity, AspectRatio -> GoldenRatio^(-1), 
           Axes -> {True, True}, AxesLabel -> {None, None}, 
           AxesOrigin -> {1.0882480657330498`, -1.1080977011230653`}, 
           DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}},
            FrameLabel -> {{None, None}, {"training examples used", None}}, 
           FrameTicks -> {{
              Charting`ScaledTicks[{Log, Exp}], {}}, {
              Charting`ScaledTicks[{Log, Exp}], {}}}, 
           GridLines -> {
            Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
             Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
           GridLinesStyle -> Directive[
             GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
           ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, LabelStyle -> 
           10, Method -> {
            "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                 (Exp[#]& )[
                  Part[#, 1]], 
                 (Exp[#]& )[
                  Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                 (Exp[#]& )[
                  Part[#, 1]], 
                 (Exp[#]& )[
                  Part[#, 2]]}& )}}, PlotRange -> {{1.0927412259650122`, 
              Log[4]}, {-1.0963265141303444`, -0.36651292058166435`}}, 
           PlotRangeClipping -> True, PlotRangePadding -> {{
              Scaled[0.02], 0}, {
              Scaled[0.02], 
              Scaled[0.05]}}, Ticks -> {
             Charting`ScaledTicks[{Log, Exp}], 
             Charting`ScaledTicks[{Log, Exp}]}}]}, 
        MachineLearning`file4Automation`PackagePrivate`pos$$], PlotLabel -> 
       Grid[{{
           Button[
            Deploy[
             MouseAppearance[
              Mouseover[
               Graphics[{
                 GrayLevel[0.25], 
                 Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                ImageSize -> {Automatic, 10}, 
                ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                Scaled[0.1]], 
               Graphics[{
                 RGBColor[
                 0.27450980392156865`, 0.5372549019607843, 0.792156862745098], 
                 Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                ImageSize -> {Automatic, 10}, 
                ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                Scaled[0.1]]], "LinkHand"]], 
            MachineLearning`file4Automation`PackagePrivate`pos$$ = 
            Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 1, 1], 
            Appearance -> "Frameless"], 
           Part[{
             Tooltip[
             "Learning curve", 
              "mean cross entropy for best algorithm at each training size"], 
             "Accuracy", 
             Tooltip[
             "Learning curves for all algorithms", 
              "mean cross entropy at each training size"]}, 
            MachineLearning`file4Automation`PackagePrivate`pos$$], 
           Button[
            Deploy[
             MouseAppearance[
              Mouseover[
               Graphics[{
                 GrayLevel[0.25], 
                 Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                ImageSize -> {Automatic, 10}, 
                ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                Scaled[0.1]], 
               Graphics[{
                 RGBColor[
                 0.27450980392156865`, 0.5372549019607843, 0.792156862745098], 
                 Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                ImageSize -> {Automatic, 10}, 
                ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                Scaled[0.1]]], "LinkHand"]], 
            MachineLearning`file4Automation`PackagePrivate`pos$$ = 
            Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 1, 
              Length[{
                Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -1.0360702384151348`}, {
                    1.0986122886681098`, -1.0360702384151348`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{1.0986122886681098`, -1.2183917952090895`}, {
                    1.0986122886681098`, -0.8537486816211802}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    1.0986122886681098`, -1.0360702384151348`}}, {{
                    1.0986122886681098`, -1.0360702384151348`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    1.0986122886681098`, -1.2183917952090895`}}, {{
                    1.0986122886681098`, -0.8537486816211802}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{1.0986122886681098`, -1.534716299242156}, {
                    1.0986122886681098`, -0.7048635702524547}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                  GridLines -> {
                   Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                  DisplayFunction -> Identity, DisplayFunction -> Identity, 
                  DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                  AxesOrigin -> {1.0882480657330498`, -1.2448578276469218`}, 
                  PlotRange -> {{1.0927412259650122`, 
                    Log[4]}, {-1.2386497459639734`, -0.8537486816211802}}, 
                  PlotRangeClipping -> True, 
                  ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                  Identity, AspectRatio -> GoldenRatio^(-1), 
                  Axes -> {True, True}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {1.0882480657330498`, -1.2448578276469218`}, 
                  DisplayFunction :> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                  GridLines -> {
                   Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                  GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                  ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                  LabelStyle -> 10, 
                  Method -> {
                   "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{1.0927412259650122`, 
                    Log[4]}, {-1.2386497459639734`, -0.8537486816211802}}, 
                  PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, 0.75}, {1.0986122886681098`, 
                    0.75}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{1.0986122886681098`, 0.625}, {1.0986122886681098`, 
                    0.8999999999999999}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    1.0986122886681098`, 0.75}}, {{1.0986122886681098`, 
                    0.75}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    1.0986122886681098`, 0.625}}, {{1.0986122886681098`, 
                    0.8999999999999999}}}]}, {}}}, {}, {}, {}, {}}}, {
                 DisplayFunction -> Identity, 
                  GridLines -> {
                   Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                  Identity, DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                  AxesOrigin -> {1.0882480657330498`, 0.6072368421052632}, 
                  PlotRange -> {{1.0927412259650122`, 
                    Log[4]}, {0.625, 1}}, PlotRangeClipping -> True, 
                  ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                  Identity, AspectRatio -> GoldenRatio^(-1), 
                  Axes -> {True, True}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {1.0882480657330498`, 0.6072368421052632}, 
                  DisplayFunction :> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                  FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                  GridLines -> {
                   Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                  ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                  LabelStyle -> 10, 
                  Method -> {
                   "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{1.0927412259650122`, 
                    Log[4]}, {0.625, 1}}, PlotRangeClipping -> True, 
                  PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -0.934772955548242}, {
                    1.0986122886681098`, -0.934772955548242}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -1.0360702384151348`}, {
                    1.0986122886681098`, -1.0360702384151348`}}]}, 
                    "NaiveBayes"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -0.5990993529432462}, {
                    1.0986122886681098`, -0.5990993529432462}}]}, 
                    "DecisionTree"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -0.7805687523507003}, {
                    1.0986122886681098`, -0.7805687523507003}}]}, 
                    "NearestNeighbors"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -0.5626863286527435}, {
                    1.0986122886681098`, -0.5626863286527435}}]}, 
                    "RandomForest"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -0.3670552918841564}, {
                    1.0986122886681098`, -0.3670552918841564}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -0.7689248188596519}, {
                    1.0986122886681098`, -0.7689248188596519}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -0.9710659547300308}, {
                    1.0986122886681098`, -0.9710659547300308}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -0.4039787773455715}, {
                    1.0986122886681098`, -0.4039787773455715}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -0.3665245407708355}, {
                    1.0986122886681098`, -0.3665245407708355}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -0.36651292058166435`}, {
                    1.0986122886681098`, -0.36651292058166435`}}]}, 
                    "GradientBoostedTrees"], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{1.0986122886681098`, -1.0579152723646243`}, {
                    1.0986122886681098`, -1.0579152723646243`}}]}, 
                    "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
                 DisplayFunction -> Identity, 
                  GridLines -> {
                   Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                  DisplayFunction -> Identity, DisplayFunction -> Identity, 
                  DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                  AxesOrigin -> {1.0882480657330498`, -1.1080977011230653`}, 
                  PlotRange -> {{1.0927412259650122`, 
                    Log[4]}, {-1.0963265141303444`, -0.36651292058166435`}}, 
                  PlotRangeClipping -> True, 
                  ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                  Identity, AspectRatio -> GoldenRatio^(-1), 
                  Axes -> {True, True}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {1.0882480657330498`, -1.1080977011230653`}, 
                  DisplayFunction :> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                  GridLines -> {
                   Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                  GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                  ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                  LabelStyle -> 10, 
                  Method -> {
                   "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{1.0927412259650122`, 
                    Log[4]}, {-1.0963265141303444`, -0.36651292058166435`}}, 
                  PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
            "Frameless"]}}, Alignment -> {Center, Baseline}, 
         ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
     ImageSizeCache->{330., {118., 123.}}],
    DynamicModuleValues:>{}]}], "}"}]], "Output",
 CellChangeTimes->{3.745218803976522*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"b1e7fe14-a73f-48d5-9309-77503ccdc0a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"c1", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<Model\>\"", "]"}], ",", 
   RowBox[{
    RowBox[{"c2", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<Model\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.745222364465819*^9, 3.745222380544265*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"8b9c6fb4-3198-45cf-96e8-c346951e9c97"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Tree\"\>", "\[Rule]", 
      InterpretationBox[
       RowBox[{
        TagBox["MachineLearning`DecisionTree",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Number of nodes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Number of leaves: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Number of nodes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Number of leaves: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of numerical nodes: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of nominal nodes: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       MachineLearning`DecisionTree[
        Association[
        "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
         RawArray["Real32",{-0.5070925354957581}], "NominalSplits" -> {}, 
         "Children" -> RawArray["Integer16",{{-1, -2}}], "LeafValues" -> 
         RawArray["UnsignedInteger8",{{3, 1}, {1, 3}}], "RootIndex" -> 1, 
         "NominalDimension" -> 0]],
       Editable->False,
       SelectWithContents->True,
       Selectable->False]}], ",", 
     RowBox[{"\<\"Processor\"\>", "\[Rule]", 
      TagBox[
       TooltipBox[
        FrameBox[
         StyleBox["\<\"Values\"\>",
          StripOnInput->False,
          FontFamily->"Helvetica Neue",
          FontWeight->"Light",
          FontColor->GrayLevel[0.]],
         Background->Opacity[1., 
           RGBColor[{0.98, 0.98, 0.9702}]],
         FrameMargins->{{3, 3}, {0.5, 0.5}},
         FrameStyle->{
           Thickness[0.5], 
           Opacity[1.], 
           GrayLevel[0.83]},
         RoundingRadius->2,
         StripOnInput->False],
        TagBox[
         GridBox[{{""}, {
            TagBox[
             GridBox[{{
                RowBox[{"\"Info\"", "\[Rule]", 
                  TagBox[
                   RowBox[{"\[LeftAssociation]", 
                    RowBox[{"\"(f1f2)\"", "\[Rule]", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Type\"", "\[Rule]", "\"NumericalVector\""}], 
                    ",", 
                    RowBox[{"\"Weight\"", "\[Rule]", "2"}]}], 
                    "\[RightAssociation]"}]}], "\[RightAssociation]"}], 
                   Short[#, 5]& ]}]}, {
                RowBox[{"\"Invertibility\"", "\[Rule]", 
                  TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
                RowBox[{"\"Missing\"", "\[Rule]", 
                  TagBox["\"Allowed\"", Short[#, 5]& ]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{Null, 
          Column[{"Info" -> Short[
              Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 5], 
            "Invertibility" -> Short["Perfect", 5], "Missing" -> 
            Short["Allowed", 5]}]}], "Tooltip"]& ]}], ",", 
     RowBox[{"\<\"Method\"\>", "\[Rule]", "\<\"DecisionTree\"\>"}], ",", 
     RowBox[{"\<\"Options\"\>", "\[Rule]", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"DistributionSmoothing\"\>", "\[Rule]", 
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"\<\"Value\"\>", "\[Rule]", "1"}], ",", 
           RowBox[{"\<\"Options\"\>", "\[Rule]", 
            RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
          "\[RightAssociation]"}]}], ",", 
        RowBox[{"\<\"FeatureFraction\"\>", "\[Rule]", 
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"\<\"Value\"\>", "\[Rule]", "1"}], ",", 
           RowBox[{"\<\"Options\"\>", "\[Rule]", 
            RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
          "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"ClassNumber\"\>", "\[Rule]", "2"}], ",", 
     RowBox[{"\<\"ClassPriors\"\>", "\[Rule]", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "0.5`"}], ",", 
        RowBox[{"2", "\[Rule]", "0.5`"}]}], "\[RightAssociation]"}]}], ",", 
     RowBox[{"\<\"LogProbabilities\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "0.04652001563489282`"}], ",", 
            RowBox[{"-", "3.0910424533583156`"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "3.0910424533583156`"}], ",", 
            RowBox[{"-", "0.04652001563489282`"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "3.0910424533583156`"}], ",", 
            RowBox[{"-", "0.04652001563489282`"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "0.04652001563489282`"}], ",", 
            RowBox[{"-", "3.0910424533583156`"}]}], "}"}]}], "}"}]}], "}"}]}],
      ",", 
     RowBox[{"\<\"FeatureNumber\"\>", "\[Rule]", "2"}], ",", 
     RowBox[{"\<\"Processor\"\>", "\[Rule]", 
      TagBox[
       TooltipBox[
        FrameBox[
         TemplateBox[{"\[ThinSpace]","\" \"",TagBox[
            TooltipBox[
             FrameBox[
              StyleBox[
              "\"DiscretizeNumericalVector\"", {
               FontFamily -> "Helvetica Neue", FontWeight -> "Light", 
                FontColor -> GrayLevel[0.]}, StripOnInput -> False], 
              RoundingRadius -> 2, FrameStyle -> {
                Thickness[0.5], 
                Opacity[1.], 
                GrayLevel[0.83]}, FrameMargins -> {{3, 3}, {0.5, 0.5}}, 
              Background -> Opacity[1., 
                RGBColor[{0.98, 0.98, 0.9702}]], StripOnInput -> False], 
             TagBox[
              GridBox[{{
                 RowBox[{
                   PanelBox[
                    TagBox[
                    
                    GridBox[{{"\"f1\"", "\"NumericalVector\""}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], "\[Rule]", 
                   PanelBox[
                    TagBox[
                    
                    GridBox[{{"\"f1\"", "\"NominalVector\""}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]]}]}, {
                 TagBox[
                  GridBox[{{
                    RowBox[{"\"Invertibility\"", "\[Rule]", 
                    TagBox["\"Approximate\"", Short[#, 5]& ]}]}, {
                    RowBox[{"\"Missing\"", "\[Rule]", 
                    TagBox["\"Forbidden\"", Short[#, 5]& ]}]}, {
                    RowBox[{"\"Boundaries\"", "\[Rule]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1.1832159566199232`"}], ",", 
                    RowBox[{"-", "0.50709255283711`"}], ",", 
                    "1.52127765851133`"}], "}"}], "}"}], Short[#, 5]& ]}]}, {
                    RowBox[{"\"Version\"", "\[Rule]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"11.3`", ",", "0"}], "}"}], Short[#, 5]& ]}]}, {
                    RowBox[{"\"ID\"", "\[Rule]", 
                    TagBox["6805508875538386472", Short[#, 5]& ]}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"]], Annotation[#, 
             Column[{Panel[
                 Grid[{{"f1", "NumericalVector"}}]] -> Panel[
                 Grid[{{"f1", "NominalVector"}}]], 
               
               Column[{
                "Invertibility" -> Short["Approximate", 5], "Missing" -> 
                 Short["Forbidden", 5], "Boundaries" -> 
                 Short[{{-1.1832159566199232`, -0.50709255283711, 
                   1.52127765851133}}, 5], "Version" -> Short[{11.3, 0}, 5], 
                 "ID" -> Short[6805508875538386472, 5]}]}], "Tooltip"]& ],
           StyleBox["\"\[RightArrow]\"", 
            Directive[
             GrayLevel[0.4], 15], StripOnInput -> False],TagBox[
            TooltipBox[
             FrameBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   TooltipBox[
                    FrameBox[
                    StyleBox[
                    "\"IntegerEncodeNominalVector\"", {
                    FontFamily -> "Helvetica Neue", FontWeight -> "Light", 
                    FontColor -> GrayLevel[0.]}, StripOnInput -> False], 
                    RoundingRadius -> 2, FrameStyle -> {
                    Thickness[0.5], 
                    Opacity[1.], 
                    GrayLevel[0.83]}, FrameMargins -> {{3, 3}, {0.5, 0.5}}, 
                    Background -> Opacity[1., 
                    RGBColor[{0.98, 0.98, 0.9702}]], StripOnInput -> False], 
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    PanelBox[
                    TagBox[
                    
                    GridBox[{{"\"f1\"", "\"NominalVector\""}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], "\[Rule]", 
                    PanelBox[
                    TagBox[
                    
                    GridBox[{{"\"f1\"", "\"NominalVector\""}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]]}]}, {
                    TagBox[
                    GridBox[{{
                    RowBox[{"\"Invertibility\"", "\[Rule]", 
                    TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
                    RowBox[{"\"Missing\"", "\[Rule]", 
                    TagBox["\"Allowed\"", Short[#, 5]& ]}]}, {
                    RowBox[{"\"Index\"", "\[Rule]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"1", "\[Rule]", "1"}], ",", 
                    RowBox[{"2", "\[Rule]", "2"}]}], "\[RightAssociation]"}], 
                    "}"}], Short[#, 5]& ]}]}, {
                    RowBox[{"\"MissingCode\"", "\[Rule]", 
                    TagBox["0", Short[#, 5]& ]}]}, {
                    RowBox[{"\"Version\"", "\[Rule]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"11.3`", ",", "0"}], "}"}], Short[#, 5]& ]}]}, {
                    RowBox[{"\"ID\"", "\[Rule]", 
                    TagBox["7785877722652513706", Short[#, 5]& ]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{Panel[
                    Grid[{{"f1", "NominalVector"}}]] -> Panel[
                    Grid[{{"f1", "NominalVector"}}]], 
                    
                    Column[{
                    "Invertibility" -> Short["Perfect", 5], "Missing" -> 
                    Short["Allowed", 5], "Index" -> Short[{
                    Association[1 -> 1, 2 -> 2]}, 5], "MissingCode" -> 
                    Short[0, 5], "Version" -> Short[{11.3, 0}, 5], "ID" -> 
                    Short[7785877722652513706, 5]}]}], "Tooltip"]& ]}, {
                  TagBox[
                   TooltipBox[
                    FrameBox[
                    StyleBox[
                    "\"IntegerEncodeNominalVector\"", {
                    FontFamily -> "Helvetica Neue", FontWeight -> "Light", 
                    FontColor -> GrayLevel[0.]}, StripOnInput -> False], 
                    RoundingRadius -> 2, FrameStyle -> {
                    Thickness[0.5], 
                    Opacity[1.], 
                    GrayLevel[0.83]}, FrameMargins -> {{3, 3}, {0.5, 0.5}}, 
                    Background -> Opacity[1., 
                    RGBColor[{0.98, 0.98, 0.9702}]], StripOnInput -> False], 
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    PanelBox[
                    TagBox[
                    GridBox[{{"\"f2\"", "\"NominalVector\""}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], "\[Rule]", 
                    PanelBox[
                    TagBox[
                    
                    GridBox[{{"\"f2\"", "\"NominalVector\""}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]]}]}, {
                    TagBox[
                    GridBox[{{
                    RowBox[{"\"Invertibility\"", "\[Rule]", 
                    TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
                    RowBox[{"\"Missing\"", "\[Rule]", 
                    TagBox["\"Allowed\"", Short[#, 5]& ]}]}, {
                    RowBox[{"\"Index\"", "\[Rule]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"1", "\[Rule]", "1"}], ",", 
                    RowBox[{"2", "\[Rule]", "2"}]}], "\[RightAssociation]"}], 
                    "}"}], Short[#, 5]& ]}]}, {
                    RowBox[{"\"MissingCode\"", "\[Rule]", 
                    TagBox["0", Short[#, 5]& ]}]}, {
                    RowBox[{"\"Version\"", "\[Rule]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"11.3`", ",", "0"}], "}"}], Short[#, 5]& ]}]}, {
                    RowBox[{"\"ID\"", "\[Rule]", 
                    TagBox["6494960019308329035", Short[#, 5]& ]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{Panel[
                    Grid[{{"f2", "NominalVector"}}]] -> Panel[
                    Grid[{{"f2", "NominalVector"}}]], 
                    
                    Column[{
                    "Invertibility" -> Short["Perfect", 5], "Missing" -> 
                    Short["Allowed", 5], "Index" -> Short[{
                    Association[1 -> 1, 2 -> 2]}, 5], "MissingCode" -> 
                    Short[0, 5], "Version" -> Short[{11.3, 0}, 5], "ID" -> 
                    Short[6494960019308329035, 5]}]}], "Tooltip"]& ]}}, 
                GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                DefaultBaseStyle -> "Column", 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], RoundingRadius -> 2, FrameStyle -> {
                Thickness[0.5], 
                Opacity[1.], 
                GrayLevel[0.83]}, Background -> Opacity[1., 
                RGBColor[{0.94, 0.94, 0.9306}]], FrameMargins -> 
              3 + Rational[1, 5] 129^Rational[1, 2], StripOnInput -> False], 
             TagBox[
              GridBox[{{
                 RowBox[{
                   PanelBox[
                    TagBox[
                    
                    GridBox[{{"\"f1\"", "\"NominalVector\""}, {
                    "\"f2\"", "\"NominalVector\""}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], "\[Rule]", 
                   PanelBox[
                    TagBox[
                    
                    GridBox[{{"\"f1\"", "\"NominalVector\""}, {
                    "\"f2\"", "\"NominalVector\""}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]]}]}, {
                 TagBox[
                  GridBox[{{
                    RowBox[{"\"Invertibility\"", "\[Rule]", 
                    TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
                    RowBox[{"\"Missing\"", "\[Rule]", 
                    TagBox["\"Allowed\"", Short[#, 5]& ]}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"]], Annotation[#, 
             Column[{Panel[
                 Grid[{{"f1", "NominalVector"}, {"f2", "NominalVector"}}]] -> 
               Panel[
                 Grid[{{"f1", "NominalVector"}, {"f2", "NominalVector"}}]], 
               
               Column[{
                "Invertibility" -> Short["Perfect", 5], "Missing" -> 
                 Short["Allowed", 5]}]}], "Tooltip"]& ],StyleBox[
           "\"\[RightArrow]\"", 
            Directive[
             GrayLevel[0.4], 15], StripOnInput -> False],TagBox[
            TooltipBox[
             FrameBox[
              StyleBox[
              "\"MergeVectors\"", {
               FontFamily -> "Helvetica Neue", FontWeight -> "Light", 
                FontColor -> GrayLevel[0.]}, StripOnInput -> False], 
              RoundingRadius -> 2, FrameStyle -> {
                Thickness[0.5], 
                Opacity[1.], 
                GrayLevel[0.83]}, FrameMargins -> {{3, 3}, {0.5, 0.5}}, 
              Background -> Opacity[1., 
                RGBColor[{0.98, 0.98, 0.9702}]], StripOnInput -> False], 
             TagBox[
              GridBox[{{
                 RowBox[{
                   PanelBox[
                    TagBox[
                    
                    GridBox[{{"\"f1\"", "\"NominalVector\""}, {
                    "\"f2\"", "\"NominalVector\""}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]], "\[Rule]", 
                   PanelBox[
                    TagBox[
                    
                    GridBox[{{"\"(f1f2)\"", "\"NominalVector\""}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]]}]}, {
                 TagBox[
                  GridBox[{{
                    RowBox[{"\"Invertibility\"", "\[Rule]", 
                    TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
                    RowBox[{"\"Missing\"", "\[Rule]", 
                    TagBox["\"Allowed\"", Short[#, 5]& ]}]}, {
                    RowBox[{"\"Spans\"", "\[Rule]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", ";;", "1"}], ",", 
                    RowBox[{"2", ";;", "2"}]}], "}"}], Short[#, 5]& ]}]}, {
                    RowBox[{"\"Wrappers\"", "\[Rule]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"Identity", ",", "Identity"}], "}"}], 
                    Short[#, 5]& ]}]}, {
                    RowBox[{"\"Version\"", "\[Rule]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"11.3`", ",", "0"}], "}"}], Short[#, 5]& ]}]}, {
                    RowBox[{"\"ID\"", "\[Rule]", 
                    TagBox["3525967189646318431", Short[#, 5]& ]}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"]], Annotation[#, 
             Column[{Panel[
                 Grid[{{"f1", "NominalVector"}, {"f2", "NominalVector"}}]] -> 
               Panel[
                 Grid[{{"(f1f2)", "NominalVector"}}]], 
               
               Column[{
                "Invertibility" -> Short["Perfect", 5], "Missing" -> 
                 Short["Allowed", 5], "Spans" -> Short[{
                    Span[1, 1], 
                    Span[2, 2]}, 5], "Wrappers" -> 
                 Short[{Identity, Identity}, 5], "Version" -> 
                 Short[{11.3, 0}, 5], "ID" -> 
                 Short[3525967189646318431, 5]}]}], "Tooltip"]& ],StyleBox[
           "\"\[RightArrow]\"", 
            Directive[
             GrayLevel[0.4], 15], StripOnInput -> False],TagBox[
            TooltipBox[
             FrameBox[
              StyleBox[
              "\"FirstValues\"", {
               FontFamily -> "Helvetica Neue", FontWeight -> "Light", 
                FontColor -> GrayLevel[0.]}, StripOnInput -> False], 
              RoundingRadius -> 2, FrameStyle -> {
                Thickness[0.5], 
                Opacity[1.], 
                GrayLevel[0.83]}, FrameMargins -> {{3, 3}, {0.5, 0.5}}, 
              Background -> Opacity[1., 
                RGBColor[{0.98, 0.98, 0.9702}]], StripOnInput -> False], 
             TagBox[
              GridBox[{{""}, {
                 TagBox[
                  GridBox[{{
                    RowBox[{"\"Info\"", "\[Rule]", 
                    TagBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Weight\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
                    RowBox[{"\"Type\"", "\[Rule]", "\"NominalVector\""}]}], 
                    "\[RightAssociation]"}], Short[#, 5]& ]}]}, {
                    RowBox[{"\"Key\"", "\[Rule]", 
                    TagBox["\"(f1f2)\"", Short[#, 5]& ]}]}, {
                    RowBox[{"\"Invertibility\"", "\[Rule]", 
                    TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
                    RowBox[{"\"Missing\"", "\[Rule]", 
                    TagBox["\"Allowed\"", Short[#, 5]& ]}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"]], Annotation[#, 
             Column[{Null, 
               Column[{"Info" -> Short[
                   Association[
                   "Weight" -> {1., 1.}, "Type" -> "NominalVector"], 5], 
                 "Key" -> Short["(f1f2)", 5], "Invertibility" -> 
                 Short["Perfect", 5], "Missing" -> Short["Allowed", 5]}]}], 
             "Tooltip"]& ]},
          "RowWithSeparators"],
         Background->Opacity[0., 
           RGBColor[{1., 1., 0.99}]],
         FrameMargins->3 + Rational[1, 5] Rational[1614, 5]^Rational[1, 2],
         FrameStyle->None,
         RoundingRadius->2,
         StripOnInput->False],
        TagBox[
         GridBox[{{
            RowBox[{
              PanelBox[
               TagBox[
                
                GridBox[{{"\"f1\"", "\"NumericalVector\""}, {
                  "\"f2\"", "\"NominalVector\""}}, AutoDelete -> False, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                "Grid"]], "\[Rule]", 
              PanelBox[
               TagBox[
                
                GridBox[{{"\"(f1f2)\"", "\"NominalVector\""}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                "Grid"]]}]}, {
            TagBox[
             GridBox[{{
                RowBox[{"\"Invertibility\"", "\[Rule]", 
                  TagBox["\"Approximate\"", Short[#, 5]& ]}]}, {
                RowBox[{"\"Missing\"", "\[Rule]", 
                  TagBox["\"Forbidden\"", Short[#, 5]& ]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{Panel[
            Grid[{{"f1", "NumericalVector"}, {"f2", "NominalVector"}}]] -> 
          Panel[
            Grid[{{"(f1f2)", "NominalVector"}}]], 
          
          Column[{"Invertibility" -> Short["Approximate", 5], "Missing" -> 
            Short["Forbidden", 5]}]}], "Tooltip"]& ]}], ",", 
     RowBox[{"\<\"Method\"\>", "\[Rule]", "\<\"NaiveBayes\"\>"}], ",", 
     RowBox[{"\<\"Options\"\>", "\[Rule]", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{"\<\"SmoothingParameter\"\>", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"\<\"Value\"\>", "\[Rule]", "0.2`"}], ",", 
          RowBox[{"\<\"Options\"\>", "\[Rule]", 
           RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
         "\[RightAssociation]"}]}], "\[RightAssociation]"}]}]}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.745222382181864*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"107ec9bb-8601-4b42-8f8a-c84f5b0220d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", "\"\<MachineLearning\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.745219711657305*^9, 3.7452197416041813`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"0fb26004-0c0a-43b8-ab9e-a4caf7b3a43a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"BostonHomes\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"FisherIris\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"MNIST\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"MovieReview\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"Mushroom\"\>"}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"Satellite\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"Titanic\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"UCILetter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MachineLearning\"\>", ",", "\<\"WineQuality\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7452197226598253`*^9, 3.745219765951611*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"4a9403f9-6a00-44a2-8ac1-769d38f4ca53"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Mushroom\>\""}], "}"}], ",", 
   "\"\<Properties\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.74521992413571*^9, 3.745219927519157*^9}, {
  3.745219970113447*^9, 3.745219980813911*^9}, {3.745222471186615*^9, 
  3.745222471669539*^9}, {3.745222535319243*^9, 3.745222536593607*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"d0e0d201-43b7-4f37-9783-5fb266d8bda9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Data\"\>", ",", "\<\"Description\"\>", ",", "\<\"Data\"\>", 
   ",", "\<\"Dimensions\"\>", ",", "\<\"LearningTask\"\>", 
   ",", "\<\"LongDescription\"\>", ",", "\<\"MissingData\"\>", 
   ",", "\<\"Name\"\>", ",", "\<\"Source\"\>", ",", "\<\"TestData\"\>", 
   ",", "\<\"TrainingData\"\>", ",", "\<\"VariableDescriptions\"\>", 
   ",", "\<\"VariableTypes\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.745219928295088*^9, 3.745219981964952*^9, 
  3.745222473111218*^9, 3.745222537675089*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"b9c1987f-9564-4c9a-9dd2-eae0dc577bc0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Mushroom\>\""}], "}"}], ",", 
   "\"\<LearningTask\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.745222549324869*^9, 3.74522259512217*^9}, {
  3.745222646371632*^9, 3.745222647406671*^9}, {3.7452226786590557`*^9, 
  3.745222679894607*^9}, {3.7452227102986717`*^9, 3.7452227110691338`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"2f824de4-a2dd-4260-80a7-ea22af1bcf93"],

Cell[BoxData["\<\"Classification\"\>"], "Output",
 CellChangeTimes->{{3.745222551082774*^9, 3.745222595497313*^9}, 
   3.745222648216177*^9, 3.745222681135931*^9, 3.745222711662184*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"03f50ddd-cbb2-45af-afdf-3c968444f7ae"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7452223374736147`*^9, 
  3.745222338946829*^9}},ExpressionUUID->"045bca87-cb45-4107-968f-\
7f8924a83133"]
},
WindowSize->{808, 691},
WindowMargins->{{Automatic, 273}, {Automatic, 0}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 948, 24, 52, "Input",ExpressionUUID->"57d64f1f-04e8-4c73-90b0-bacec8348168"],
Cell[1531, 48, 33886, 647, 63, "Output",ExpressionUUID->"db9aa28d-20d3-4d09-9153-e192dfdb9fb5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35454, 700, 783, 22, 52, "Input",ExpressionUUID->"4fbaaa30-709c-46e3-940d-efbb62caeb4c"],
Cell[36240, 724, 54239, 1016, 63, "Output",ExpressionUUID->"d6d36e8a-a10d-455e-afc1-ed5c8a10e650"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90516, 1745, 552, 12, 30, "Input",ExpressionUUID->"47571d75-a0f6-4e5f-8210-8c65b3330a59"],
Cell[91071, 1759, 206, 4, 34, "Output",ExpressionUUID->"8252f004-9055-4a00-8611-c32fff03108c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91314, 1768, 617, 16, 30, "Input",ExpressionUUID->"43234ab7-dee8-45f0-91a0-7e9eb30d4dab"],
Cell[91934, 1786, 557, 13, 34, "Output",ExpressionUUID->"52af0d5e-2357-4b95-8e3b-3d259368b241"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92528, 1804, 378, 7, 30, "Input",ExpressionUUID->"38f5becd-8f1c-4340-ac49-3a867fa402c6"],
Cell[92909, 1813, 44912, 913, 311, "Output",ExpressionUUID->"1056b8b7-02ea-462a-8b7d-746f8cd34131"]
}, Open  ]],
Cell[CellGroupData[{
Cell[137858, 2731, 415, 8, 52, "Input",ExpressionUUID->"bce58246-aaef-454f-944e-7ef466e85d17"],
Cell[138276, 2741, 60324, 1213, 260, "Output",ExpressionUUID->"b1e7fe14-a73f-48d5-9309-77503ccdc0a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[198637, 3959, 424, 11, 30, "Input",ExpressionUUID->"8b9c6fb4-3198-45cf-96e8-c346951e9c97"],
Cell[199064, 3972, 31592, 669, 347, "Output",ExpressionUUID->"107ec9bb-8601-4b42-8f8a-c84f5b0220d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230693, 4646, 233, 3, 30, "Input",ExpressionUUID->"0fb26004-0c0a-43b8-ab9e-a4caf7b3a43a"],
Cell[230929, 4651, 1090, 27, 98, "Output",ExpressionUUID->"4a9403f9-6a00-44a2-8ac1-769d38f4ca53"]
}, Open  ]],
Cell[CellGroupData[{
Cell[232056, 4683, 482, 9, 30, "Input",ExpressionUUID->"d0e0d201-43b7-4f37-9783-5fb266d8bda9"],
Cell[232541, 4694, 614, 10, 56, "Output",ExpressionUUID->"b9c1987f-9564-4c9a-9dd2-eae0dc577bc0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[233192, 4709, 490, 9, 30, "Input",ExpressionUUID->"2f824de4-a2dd-4260-80a7-ea22af1bcf93"],
Cell[233685, 4720, 264, 3, 68, "Output",ExpressionUUID->"03f50ddd-cbb2-45af-afdf-3c968444f7ae"]
}, Open  ]],
Cell[233964, 4726, 154, 3, 30, "Input",ExpressionUUID->"045bca87-cb45-4107-968f-7f8924a83133"]
}
]
*)

